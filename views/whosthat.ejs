<!doctype html>
<html lang="nl-BE">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Who's that pok√©mon</title>
    <%- include('partials/head'); %>
    <link rel="stylesheet" type="text/css" href="css/style.css">
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11" defer></script>
    <script defer>
      let pokemonName = '<%= pokemon.name %>';
      let pokeNames = '<%= pokeNames %>'.split(",");
    //Autocomplete volgens W3schools
    function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substring(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substring(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substring(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
              b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
      x[i].parentNode.removeChild(x[i]);
    }
  }
}
/*execute a function when someone clicks in the document:*/
document.addEventListener("click", function (e) {
    closeAllLists(e.target);
});
}
window.addEventListener("DOMContentLoaded", () => {
  var el = document.getElementById("pokenaam");
if(el){
  autocomplete(document.getElementById("pokenaam"), pokeNames);
}else{
  console.log('Element not found!');
}
})
    </script>
  </head>
<body>
  <%- include('partials/navbar.ejs'); %>
  <main class="justify-content-center w-75 flex-column mx-auto d-flex">
      <section class="w-100">
        <header>
            <img src="<%= pokemon._sprites.front_default %>" class="w-25 mx-auto d-block cover mx-auto" />
        </header>
        <main class="autocomplete w-100">
          <input type="text" name="pokenaam" id="pokenaam" class="mx-auto w-100" placeholder="Naam van de pokemon">
          <button class="btn btn-danger mb-2 w-100" onclick="
             if(pokemonName == document.getElementById('pokenaam').value){
                    Swal.fire({
                        title: 'Correct!',
                        text: 'Het was inderdaad <%= pokemon.name %>',
                        imageUrl: '<%= pokemon._sprites.front_default %>',
                        showConfirmButton: true,
                        confirmButtonText: 'doorgaan',
                        timer: 1500
                        }).then(function(){ 
                          window.location.href=`/addBoost/<%= sessionId %>/`+pokemonName;
                        }
                      )
                }else{
                  Swal.fire({
                            title: 'Fout',
                            text: 'Dit was niet de juiste pokemon, het was <%= pokemon.name %> ', 
                            imageUrl: '<%= pokemon._sprites.front_default %>',
                            showConfirmButton: true,
                            confirmButtonText: 'doorgaan'
                            }).then(function(){ 
                            location.reload();
                            }
                            )
                                }
                
                ">Gokken</button>
            </main>
        </article>
      </section>
  </main>
</body>
</html>